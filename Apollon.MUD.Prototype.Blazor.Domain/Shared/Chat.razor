@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Http
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor


<div class="container bg-light rounded">
    <div class="panel panel-primary">
        <div class="panel-heading mt-3 text-center">
            <h5>Chat</h5>
        </div>
        <div class="panel-body">
            <ul class="chat">
                @foreach (var message in messages)
                {
                    <li class="left clearfix">
                        <div class="chat-body clearfix">
                            <div class="header">
                                <strong class="primary-font">@message.from</strong>
                                <small class="pull-right text-muted">
                                    <span class="glyphicon glyphicon-time"></span>to @message.to:
                                </small>
                            </div>
                            <p>
                                @message.message
                            </p>
                        </div>
                    </li>
                }
            </ul>
        </div>
        <div class="chat mt-2 mb-2">
            <div class="prompt d-flex">
                <input @bind="messageInput" id="prompt" type="text" class="form-control" autocorrect="off" autocapitalize="off" autocomplete="off" spellcheck="false">
                <button @onclick="Send" id="send" class="btn btn-primary ms-2">Send</button>
            </div>
            <span> </span>
        </div>
    </div>
</div>

@code {
    private Queue<(string from, string to, string message)> messages;
    private HubConnection hubConnection;
    private string messageInput;

    protected async override Task OnInitializedAsync()
    {
        messages = new Queue<(string, string, string)>();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/ChatHub"))
            .Build();

        hubConnection.On<string, string, string>("ReceiveMessage", (from, to, message) =>
        {
            messages.Enqueue((from, to, message));

            while (messages.Count > 20)
            {
                messages.Dequeue();
            }

            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        messages.Enqueue(("Me", "All", messageInput));

        while (messages.Count > 20)
        {
            messages.Dequeue();
        }

        StateHasChanged();
        hubConnection.SendAsync("SendMessage", HttpContextAccessor.HttpContext.User.Identity.Name, messageInput);
    }

}
