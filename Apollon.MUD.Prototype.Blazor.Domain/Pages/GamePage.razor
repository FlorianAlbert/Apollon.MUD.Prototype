@page "/game1"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable

<AuthorizeView>
    <Authorized>
        <div class="container-fluid max-vh-100">
            <div class="play">
                <div class="window">
                    <div class="row">
                        <div class="col">
                            <div class="terminal mt-3 rounded" style="font-family: Monaco, monospace; font-size: 16px; line-height: 24px;">
                                <span>   _____                .__  .__                           </span>
                                <span>  /  _  \ ______   ____ |  | |  |   ____   ____            </span>
                                <span> /  /_\  \\____ \ /  _ \|  | |  |  /  _ \ /    \           </span>
                                <span>/    |    \  |_&gt; &gt;  &lt;_&gt; )  |_|  |_(  &lt;_&gt; )   |  \          </span>
                                <span>\____|__  /   __/ \____/|____/____/\____/|___|  /          </span>
                                <span>        \/|__|                                \/           </span>
                                <span>________                                                   </span>
                                <span>\______ \  __ __  ____    ____   ____  ____   ____   ______</span>
                                <span> |    |  \|  |  \/    \  / ___\_/ __ \/  _ \ /    \ /  ___/</span>
                                <span> |    `   \  |  /   |  \/ /_/  &gt;  ___(  &lt;_&gt; )   |  \\___ \ </span>
                                <span>/_______  /____/|___|  /\___  / \___  &gt;____/|___|  /____  &gt;</span>
                                <span>        \/           \//_____/      \/           \/     \/ </span>
                                <span> </span>
                                > Bitte gib deinen Namen ein:
                                @foreach (var entry in entries)
                                {
                                    @entry
                                }
                            </div>
                            <div class="prompt d-flex">
                                <input @bind="messageInput" id="prompt" type="text" class="form-control" autocorrect="off" autocapitalize="off" autocomplete="off" spellcheck="false">
                                <button id="send" class="btn btn-primary" @onclick="Send" disabled="@(!IsConnected)">Send</button>
                            </div>
                        </div>
                        <div class="col-3">
                            <Chat />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-danger" role="alert">
            You need to be logged in to see this page.<a href="Identity/Account/Login" class="alert-link">Login</a>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    private HubConnection hubConnection;
    private Queue<string> entries = new Queue<string>();
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/ConsoleHub"))
            .Build();

        hubConnection.On<string>("ReceiveMessage", message =>
        {
            var encodedMsg = $"> {message}\n";
            entries.Enqueue(encodedMsg);
            while (entries.Count > 20)
            {
                entries.Dequeue();
            }
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        hubConnection.SendAsync("EnterMockDungeonRequest");
    }

    async Task Send()
    {
        entries.Enqueue(messageInput + "\n");
        
        while (entries.Count > 20)
        {
            entries.Dequeue();
        }

        StateHasChanged();
        hubConnection.SendAsync("SendMessage", messageInput);
    }

    public bool IsConnected =>
    hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}